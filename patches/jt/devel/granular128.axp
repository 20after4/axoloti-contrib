<patch-1.0 appVersion="1.0.10">
   <obj type="table/alloc 16b sdram" uuid="6d8eb0fd68f404cb5d14e7d4c8c146c8ccf09da1" name="graintable" x="154" y="0">
      <params/>
      <attribs>
         <combo attributeName="size" selection="2097152"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="308" y="0">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="392" y="0">
      <params/>
      <attribs/>
   </obj>
   <obj type="table/record" uuid="2f8909f3691be093f0b8cf6532d4acff2dcb1a9f" name="record_1" x="476" y="0">
      <params/>
      <attribs>
         <objref attributeName="table" obj="graintable"/>
      </attribs>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="14" y="14">
      <params>
         <frac32.s.map name="pitch" value="-55.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="14" y="112">
      <params>
         <frac32.u.map name="amp" value="0.09999990463256836"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b0682c5d-374d-4701-85a9-4f14776b0fe0" name="granular128" x="154" y="126">
      <params>
         <frac32.u.map name="offset" MidiCC="1" value="63.99999952316284"/>
         <frac32.u.map name="spread" MidiCC="2" value="4.5"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="graintable"/>
      </attribs>
      <object id="patch/object" uuid="b0682c5d-374d-4701-85a9-4f14776b0fe0">
         <sDescription>plays 128 grains from 16-bit sdram table
conflicts with serial on gpio!</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>osc.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="offsetm"/>
            <frac32.bipolar name="spreadm"/>
         </inlets>
         <outlets>
            <frac32buffer name="l"/>
            <frac32buffer name="r"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="offset"/>
            <frac32.u.map name="spread"/>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t * offsets[129];

int32_t phase;

__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t ___SMULTT (int32_t op1, int32_t op2)
{
  int32_t result;

  __ASM volatile ("smultt %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2));
  return(result);
}

__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t ___SMULBB (int32_t op1, int32_t op2)
{
  int32_t result;

  __ASM volatile ("smulbb %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2));
  return(result);
}

void simd16_env(int32_t *outp, int32_t a_new, int32_t a_prev, int32_t *src){
	int32_t ainc = (a_new-a_prev)>>3;
	int32_t a = a_prev + ((a_prev+(ainc>>1))<<16);
	ainc = ainc + (ainc<<16);
	int i = BUFSIZE/2;
	while(i--) {
		int32_t s_s16_s16 = *src++;
		int32_t x1 = ___SMULBB(a, s_s16_s16);
		*outp++ += x1>>6;
		x1 = ___SMULTT(a, s_s16_s16);
		*outp++ += x1>>6;
		a+=ainc;
	}
}]]></code.declaration>
         <code.init><![CDATA[int i;
for(i=0;i<129;i++){
	offsets[i] = (int32_t *)&attr_table.array[0];
}
phase = 0;]]></code.init>
         <code.krate><![CDATA[int i;
for(i=0;i<BUFSIZE;i++) {
	outlet_l[i]=0;
	outlet_r[i]=0;
}

dmaStreamRelease(STM32_DMA2_STREAM5);
static int32_t ss1[8] __attribute__ ((section (".sram2")));
static int32_t ss2[8] __attribute__ ((section (".sram2")));
if (dmaStreamAllocate(STM32_DMA2_STREAM5, 0, NULL, NULL)) {
	LogTextMessage("dma fail");
	chThdSleepMilliseconds(150);
	return;
}
dmaStartMemCopy(STM32_DMA2_STREAM5,
               STM32_DMA_CR_PL(0) | STM32_DMA_CR_PSIZE_WORD |
                                    STM32_DMA_CR_MSIZE_WORD,
               offsets[0], &ss2[0], 8);
dmaWaitCompletion(STM32_DMA2_STREAM5);
DMA_Stream_TypeDef *stream = STM32_DMA2_STREAM5->stream;


int c;
int phl = phase;
int index = ((uint32_t)phase)>>25;

int32_t poff=__USAT(param_offset+inlet_offsetm,27);
int32_t pspr=__USAT(param_spread+inlet_spreadm,27);

int off = 2*__SMMLA(pspr+0x20000,(((uint32_t)GenerateRandomNumber())>>(31-attr_table.LENGTHPOW)), poff>>(28-attr_table.LENGTHPOW));
int lim = attr_table.LENGTH - 128 * BUFSIZE;
if (off >= lim){
	off = lim - (off - lim);
}
if (off<0) {
	off = 0;
}
offsets[index] = (int32_t *)&attr_table.array[off];
offsets[128] = (int32_t *)&attr_table.array[0];

for(c=0;c<128;c++){	
// dma+simd implementation
	// pingpoing DMA to SRAM
	int32_t *sp = offsets[c+1];
	offsets[c+1]+=BUFSIZE/2;
//		dmaWaitCompletion(STM32_DMA2_STREAM5);
	while ((stream->CR & STM32_DMA_CR_EN) != 0) {
	}
	*(STM32_DMA2_STREAM5)->ifcr = STM32_DMA_ISR_MASK << (STM32_DMA2_STREAM5)->ishift;
	dmaStreamSetPeripheral(STM32_DMA2_STREAM5,sp);
	dmaStreamSetMemory0(STM32_DMA2_STREAM5,&ss1[0]);
	dmaStreamEnable(STM32_DMA2_STREAM5);
	int32_t a1 = phl;
	a1 = a1>0?a1:-a1;
	phl += 0x02000000;
	int32_t a2 = phl;
	a2 = a2>0?a2:-a2;
	simd16_env(&outlet_l[0], a2>>16, a1>>16, &ss2[0]);

	c++;
	sp = offsets[c+1];
	offsets[c+1]+=BUFSIZE/2;
//		dmaWaitCompletion(STM32_DMA2_STREAM5);
	while ((stream->CR & STM32_DMA_CR_EN) != 0) {
	}
	*(STM32_DMA2_STREAM5)->ifcr = STM32_DMA_ISR_MASK << (STM32_DMA2_STREAM5)->ishift;
	dmaStreamSetPeripheral(STM32_DMA2_STREAM5,sp);
	dmaStreamSetMemory0(STM32_DMA2_STREAM5,&ss2[0]);
	dmaStreamEnable(STM32_DMA2_STREAM5);

	a1 = phl;
	a1 = a1>0?a1:-a1;
	phl += 0x02000000;
	a2 = phl;
	a2 = a2>0?a2:-a2;
	simd16_env(&outlet_r[0], a2>>16, a1>>16, &ss1[0]);
}

phase += 0x02000000;


dmaWaitCompletion(STM32_DMA2_STREAM5);
dmaStreamRelease(STM32_DMA2_STREAM5);]]></code.krate>
      </object>
   </patchobj>
   <obj type="patch/object" uuid="b0682c5d-374d-4701-85a9-4f14776b0fe0" name="obj_1" x="154" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="294" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_2" x="14" y="210">
      <params>
         <frac32.u.map name="amp" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="record_1" inlet="wave"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="record_1" inlet="start"/>
      </net>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="*c_1" inlet="in"/>
         <dest obj="*c_2" inlet="in"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="granular128" inlet="offsetm"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="granular128" inlet="spreadm"/>
      </net>
      <net>
         <source obj="granular128" outlet="r"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="granular128" outlet="l"/>
         <dest obj="out_1" inlet="left"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>838</x>
      <y>516</y>
      <width>913</width>
      <height>668</height>
   </windowPos>
</patch-1.0>