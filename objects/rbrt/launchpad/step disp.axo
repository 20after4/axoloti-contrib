<objdefs appVersion="1.0.11">
   <obj.normal id="step disp" uuid="fdc567ec-904b-46ff-a12c-effb063c63fd">
      <sDescription>display a step counter on a novation launchpad</sDescription>
      <author>Robert Schirmer</author>
      <license>BSD</license>
      <helpPatch>launchpad.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <int32 name="offset" description="offset in the table to read from"/>
         <int32 name="start" description="display start on the LP"/>
         <int32 name="onC" description="color on"/>
         <int32 name="offC" description="color off"/>
         <int32 name="stepC" description="step color modulation"/>
         <int32 name="step" description="current step"/>
         <frac32.bipolar name="delay" description="delay time for step position display"/>
         <bool32 name="active" description="active??"/>
      </inlets>
      <outlets/>
      <displays/>
      <params>
         <int32 name="stepC" description="step color">
            <MinValue i="0"/>
            <MaxValue i="14"/>
         </int32>
         <bool32.tgl name="active" description="active?"/>
      </params>
      <attribs>
         <objref name="table" description="table to display"/>
         <combo name="device">
            <MenuEntries>
               <string>usb host port / LP</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int ntrig;
int prev;
int32_t val;
int32_t map[64];
uint8_t cmap[15];
int v;
int i;]]></code.declaration>
      <code.init><![CDATA[{ 
  int i;
  for(i=0;i<64;i++) 

  map[i] = (((i >> 3)<< 3) + i);

}

cmap[0] = 0;
cmap[1] = 1;
cmap[2] = 2;
cmap[3] = 3;
cmap[4] = 18;
cmap[5] = 35;
cmap[6] = 16;
cmap[7] = 32;
cmap[8] = 48;
cmap[9] = 33;
cmap[10] = 50;
cmap[11] = 49;
cmap[12] = 17;
cmap[13] = 34;
cmap[14] = 51;]]></code.init>
      <code.krate><![CDATA[if (param_active || inlet_active) { 
v = attr_table.array[__USAT((inlet_offset + inlet_step),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
if ((inlet_step  != prev) && !ntrig) {
  val = 1 << 30;
  ntrig = 1;
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step + inlet_start)],cmap[(param_stepC + inlet_stepC)]);
}
else {
  if (!(inlet_step != prev))
    ntrig = 0;
  if (val>0) {
    int32_t t;
    MTOF(-((1<<12 )- inlet_delay),t);
     val -= t>>3;
     if (val<=0) {
          if (v) MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step + inlet_start)],cmap[inlet_onC]);
     	else
     	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step + inlet_start)],cmap[inlet_offC]);
     	  	     }
  } 
}
prev = inlet_step;
}]]></code.krate>
   </obj.normal>
</objdefs>