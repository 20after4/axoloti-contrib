<objdefs appVersion="1.0.10">
   <obj.normal id="sample and hold" uuid="41cb9a8f-c246-4a6e-bd28-8ceb072b00ae">
      <sDescription>Sample and hold module with hold time scaling parameter (what this does is adjusting the hold time according to the current sample amplitude)

Based on Johannes Taelman dist/samplehold cheap and osc/sine lin</sDescription>
      <author>Sputnki</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32buffer name="in"/>
         <frac32 name="freq"/>
         <frac32 name="scaling"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map.freq name="freq" noLabel="true"/>
         <frac32.s.map name="scaling"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t Phase; 


int32_t in0;
int32_t hold;
int32_t additional;
int32_t scaling;]]></code.declaration>
      <code.init><![CDATA[Phase = 0;


in0 = 0;
hold = 0;
additional = 0;]]></code.init>
      <code.krate><![CDATA[scaling= inlet_scaling+param_scaling;]]></code.krate>
      <code.srate><![CDATA[Phase += (param_freq + inlet_freq + additional)<<4;
int32_t r;
SINE2TINTERP(Phase,r)


if ((r>0)&&!(in0>0)){
    hold = inlet_in;
    additional=___SMMUL(scaling,hold>0?hold:-hold)<<5;
  }
in0 = r;

outlet_out = hold;]]></code.srate>
   </obj.normal>
</objdefs>