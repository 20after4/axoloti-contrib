<objdefs appVersion="1.0.10">
   <obj.normal id="PolyCount" uuid="5b17b61e-81de-4725-8a01-b49a6c92d43c">
      <sDescription>random measure generator
Set the maximum &apos;bar&apos;-count with the &quot;total&quot; parameter.
min sets the minimum amount of counts per measure
max sets the maximum amount of counts per mearuse
press random to re-randomise the measures
quant quantizes the measure length to whole steps in power of 2,so 8ths-&gt;4ths-&gt;2s

Inputs: 

TRIGGER: multiple ways:
-connect the trigger input to a tempo-synced LFO which gets it&apos;s rate multiplied with the max-output of this module. this way measures always take the same time, but you have fills at different rates-&gt;polyrhythmic measures: 1/1,2/2,3/3,4/4,5/5
-just connect a LFO to the trigger, this will create measures of different time-length: 1/1,2/1,3/1,4/1

R:
r resets the internal count back to zero, useful if its running allongside other sequencers and needs to be reset at the same positions.

RND:
rnd randomises the whole set of beats-per-measure.

OUTPUTS:
count: outputs the count-per measure/stage (drive some pattern generator with this)
max: outputs the maximum count for the measure/stage (for if pattern generator asks for a maximum count-input)
stage: outputs which stage the counter is in (useful for adding variations per measure/stage)
c: outputs a trigger when the total-count restarts at 0.
normal: outputs the normal total-count
normax: outputs the maximum of the total-count (for same use as max output)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>counter.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig" description="trigger"/>
         <bool32.rising name="r" description="reset"/>
         <bool32.rising name="rnd"/>
      </inlets>
      <outlets>
         <int32 name="count"/>
         <int32 name="max"/>
         <int32 name="stage"/>
         <bool32.pulse name="c" description="carry pulse"/>
         <int32 name="normal"/>
         <int32 name="normax"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="total">
            <MinValue i="1"/>
            <MaxValue i="256"/>
         </int32>
         <int32 name="min">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <int32 name="max">
            <MinValue i="0"/>
            <MaxValue i="64"/>
         </int32>
         <bool32.mom name="rnd"/>
         <int32 name="quant">
            <MinValue i="0"/>
            <MaxValue i="8"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[   int ntrig;
   int rtrig;
   int count;

int32_t max[64];
int i;
int stage;
int k;
int strig;
int32_t random;]]></code.declaration>
      <code.init><![CDATA[    count=0;
   ntrig = 0;
   rtrig = 0;
max[0]== (int32_t)(GenerateRandomNumber()% 8)+1;
for(i=1;i<64;i++){
	max[i] = (int32_t)(GenerateRandomNumber()% 8)+1+max[i-1];

	}

]]></code.init>
      <code.krate><![CDATA[int32_t width=param_max-param_min;
outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_total) {count = 0; outlet_c = 1;stage=0;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(inlet_r>0)) rtrig=0;

int rnd=inlet_rnd+param_rnd;
if((rnd>0)&&!strig){
max[0]= ((((int32_t)(GenerateRandomNumber()% (width)))+param_min)>>param_quant)<<param_quant;
for(i=1;i<64;i++){
	max[i] = (((((int32_t)(GenerateRandomNumber()% (width)))>>param_quant)<<param_quant)+param_min)+max[i-1];
	}
strig=1;}
else if (!(rnd>0)){strig=0;}



stage=0;k=0;
for(i=0;i<64;i++){
if(count>=max[i]){
stage=max[i];
k=i;}
}
outlet_count= count-stage;
outlet_max=max[k+1]-max[k];
outlet_stage=k;
outlet_normal=count;
outlet_normax=param_total;]]></code.krate>
   </obj.normal>
</objdefs>