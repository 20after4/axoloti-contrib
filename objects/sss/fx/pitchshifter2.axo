<objdefs appVersion="1.0.10">
   <obj.normal id="pitchshifter2" uuid="3d5cf830-8fee-434d-8fd8-1b33538da148">
      <sDescription>audio PitchShifter
Featuring:
-semitone shift
-Harmonic shift
-Ratio
-Rate to window ratio to finetune to incoming audio

NOTE! Use phi-&gt;delay-&gt;write_pow_out delay-write-module to get the samplelength bit!!!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>lfo.axh</helpPatch>
      <inlets>
         <frac32buffer name="AudioIn"/>
         <int32.positive name="samplelength" description="Use with Phi-delay-&quot;write_pow_out&quot; module to set used samplelength set in the delay_write module"/>
         <frac32.bipolar name="semitone" description="Shift by semitone"/>
         <frac32.bipolar name="harmshift" description="Shift by harmonic. ratio is 4:1 (1 harmonic per knob value 4)"/>
         <frac32.bipolar name="ratioshift" description="Shift by ratio. ratio is 8:1 (1 harmonic per knob value 8)"/>
         <frac32.positive name="windowratio" description="set window to rate ratio to reduce/induce tremelo."/>
      </inlets>
      <outlets>
         <frac32buffer name="AudioOut"/>
         <frac32 name="result"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="delayname"/>
      </attribs>
      <code.declaration><![CDATA[

   int32_t _prev1;
   int32_t _step1;
   int32_t _prev2;
   int32_t _step2;
       

uint32_t Phase;
uint32_t r;
uint32_t h;
int32_t val;


int32_t freq; 
int32_t freh; ]]></code.declaration>
      <code.init><![CDATA[

   
   Phase = 0;
   r = 1;
val = 0;
]]></code.init>
      <code.krate><![CDATA[int32_t f;
int32_t sami=inlet_semitone>0?0:inlet_semitone;
   MTOF((1<<27)+sami,f);


   int64_t ratio;
   int32_t windowratio=((inlet_windowratio-(1<<26))*10/11)+(1<<26);
   int32_t invwindowratio=(1<<27)-windowratio;
   ]]></code.krate>
      <code.srate><![CDATA[



int32_t result;
int32_t ar=inlet_semitone*8/12;
int8_t s = (ar>>24)+4;
uint8_t ei = ar>>16;
if (s>=0)
     result = ((expt[ei]<<s)<<2)-(1<<21);
else result = ((expt[ei]>>(-s)))-(1<<21);

int32_t frac;
int32_t depth;
depth=___SMMUL((1<<25)<<3,invwindowratio<<2)<<2;
if((inlet_samplelength-13)>=0)
frac=(___SMMUL(((1<<25)+(1<<21)/20)<<3,windowratio<<2)<<2)>>(inlet_samplelength-13);
else
frac=(___SMMUL(((1<<25)+(1<<21)/20)<<3,windowratio<<2)<<2)<<(inlet_samplelength-13);


freq=frac;
freh=___SMMUL(freq<<3,inlet_harmshift)<<6;
freq=___SMMUL(result<<3,freq<<2)<<6;

int32_t wave;
int32_t fras=(-(freq+freh)>>4)<<2;
int32_t ratoo=___SMMUL((inlet_ratioshift-(1<<24))<<1,(fras+frac)<<2)<<1;

Phase += (fras-ratoo);
wave= (Phase>>5);
int32_t Sin;



SINE2TINTERP(Phase-(1<<29),Sin)
int32_t sina=-(Sin>>5)+(1<<26);
int32_t saw;
saw=((Phase>>5)+(1<<24)) & ((1<<27)-1);
int32_t saw2;
saw2=(saw+(1<<26)) & ((1<<27)-1);

int32_t timea;
int32_t timeb;
timea=___SMMUL(saw<<3,depth);
timeb=___SMMUL(saw2<<3,depth);


   _step1 = (timea - _prev1)>>4;
   int32_t _i1 = _prev1;
   _prev1 = timea;

   _step2 = (timeb - _prev2)>>4;
   int32_t _i2 = _prev2;
   _prev2 = timeb;

   int32_t ccompl = ((128<<20)-sina);
   outlet_result=Phase>>5;
  



int32_t conv1;
int32_t conv2;
   conv1 = _i1;
   _i1 += _step1;
   conv2 = _i2;
   _i2 += _step2;

int32_t pitch1;
int32_t pitch2;

      uint32_t delay1 = attr_delayname.writepos - (__USAT(conv1,27)>>(27-attr_delayname.LENGTHPOW)) - BUFSIZE + buffer_index;
      pitch1= attr_delayname.array[delay1 & attr_delayname.LENGTHMASK]<<14;

      uint32_t delay2 = attr_delayname.writepos - (__USAT(conv2,27)>>(27-attr_delayname.LENGTHPOW)) - BUFSIZE + buffer_index;
      pitch2= attr_delayname.array[delay2 & attr_delayname.LENGTHMASK]<<14;

         {
      int64_t a = (int64_t)pitch2 * sina;
      a += (int64_t)pitch1 * ccompl;
      
   val = ___SMMLA(((a>>27)-val)<<1,f,val);
   

      
      outlet_AudioOut= val;
   }
]]></code.srate>
   </obj.normal>
</objdefs>