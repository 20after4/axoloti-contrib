<objdefs appVersion="1.0.10">
   <obj.normal id="stChorus" uuid="51e31bf8-000d-483c-b57f-31a7d58a4588">
      <sDescription>stereo chorus module
connect delay_write modules to the recL and recR output.
Normal chorus setting would be 100ms max</sDescription>
      <author>Remco van der most</author>
      <license>BSD</license>
      <helpPatch>delay.axh</helpPatch>
      <inlets>
         <frac32buffer name="audioL"/>
         <frac32buffer name="audioR"/>
         <frac32 name="pre"/>
         <frac32 name="depth"/>
         <frac32 name="rate"/>
      </inlets>
      <outlets>
         <frac32buffer name="outL" description="wave"/>
         <frac32buffer name="outR"/>
         <frac32buffer name="recL"/>
         <frac32buffer name="recR"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="rate"/>
         <frac32.u.map name="depth"/>
         <frac32.u.map name="pre"/>
         <frac32.s.map name="wet"/>
         <frac32.s.map name="dry"/>
         <frac32.s.map name="feedback"/>
      </params>
      <attribs>
         <objref name="delayname1"/>
         <objref name="delayname2"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t phase;
int32_t pre;
int32_t depth;
int32_t idepth;
int32_t Pre;
int32_t Depth;
int32_t Rate;]]></code.declaration>
      <code.krate><![CDATA[pre=inlet_pre+param_pre;
depth=__USAT(inlet_depth+param_depth,27);
depth=___SMMUL(depth<<3,depth<<2);
idepth=(1<<27)-depth;

int32_t pra=___SMMUL(pre<<3,idepth<<2)+(depth>>1);
int32_t rate=param_rate+inlet_rate;
rate=___SMMUL(rate<<3,rate<<2)>>6;]]></code.krate>
      <code.srate><![CDATA[Rate=Rate+((rate-Rate)>>6);
phase+=Rate;
Pre=Pre+((pra-Pre)>>6);
Depth=Depth+((depth-Depth)>>6);
int32_t sine;
SINE2TINTERP(phase,sine)
int32_t read1=__USAT(___SMMUL(Depth,sine>>1)+Pre,27);
int32_t read2=__USAT(-___SMMUL(Depth,sine>>1)+Pre,27);     
      
      uint32_t tmp_d =  read1;
      uint32_t tmp_di = attr_delayname1.writepos - (tmp_d>>(27-attr_delayname1.LENGTHPOW)) - BUFSIZE + buffer_index -1;
      uint32_t tmp_w1 = (tmp_d<<(attr_delayname1.LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = attr_delayname1.array[tmp_di&attr_delayname1.LENGTHMASK]<<16;
      int32_t tmp_a2 = attr_delayname1.array[(tmp_di+1)&attr_delayname1.LENGTHMASK]<<16;
      int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
outlet_outL=___SMMUL(param_dry<<3,inlet_audioL<<2)+___SMMUL(param_wet<<3,tmp_r<<2);
outlet_recL=inlet_audioL+___SMMUL(param_feedback<<3,tmp_r<<2);

      tmp_d =  read2;
      tmp_di = attr_delayname2.writepos - (tmp_d>>(27-attr_delayname2.LENGTHPOW)) - BUFSIZE + buffer_index -1;
      tmp_w1 = (tmp_d<<(attr_delayname2.LENGTHPOW+3)) & 0x3FFFFFFF;
      tmp_w2 = (1<<30) - tmp_w1;
      tmp_a1 = attr_delayname2.array[tmp_di&attr_delayname2.LENGTHMASK]<<16;
      tmp_a2 = attr_delayname2.array[(tmp_di+1)&attr_delayname2.LENGTHMASK]<<16;
      tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
outlet_outR=___SMMUL(param_dry<<3,inlet_audioR<<2)+___SMMUL(param_wet<<3,tmp_r<<2);
outlet_recR=inlet_audioR+___SMMUL(param_feedback<<3,tmp_r<<2);]]></code.srate>
   </obj.normal>
</objdefs>