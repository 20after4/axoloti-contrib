<objdefs appVersion="1.0.10">
   <obj.normal id="rndPatt" uuid="8139b931-84bc-46b3-9f19-790c0016121e">
      <sDescription>random generated pattern
each time a trigger is received, positions of the pattern will be randomised or not, depending on the change parameter (in percentage, so 100 is randomising the whole pattern when triggered).

Connect a control to the &quot;length&quot; input to set the total length of the incoming count (eg use my counter, where the max-control is controlled externally and use that max-control to control both modules&apos; length).

With the length-parameter you can set a division of the total length, repeating only a part of the random values.
eg. set max to 8 and the length-knob to about 21.00 and you&apos;ll get a 1,2,3,1,2,3,1,2 repetition.

The chance-parameter sets the chance that any position in the pattern will be randomised when a random-trigger is received.

The pattern will be newly randomised each time you start up your axoloti.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <bool32.rising name="rnd" description="trigger"/>
         <int32 name="count"/>
         <int32 name="length"/>
      </inlets>
      <outlets>
         <int32.positive name="v"/>
         <bool32.pulse name="rnd"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="max" noLabel="true">
            <MinValue i="0"/>
            <MaxValue i="65536"/>
         </int32>
         <frac32.u.map name="length"/>
         <bool32.mom name="rnd"/>
         <int32 name="chance">
            <MinValue i="0"/>
            <MaxValue i="100"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int get[64];
int32_t val[64];
int ntrig;
int count;
int32_t length;
int i;
int on;
]]></code.declaration>
      <code.init><![CDATA[      on=1;
ntrig = 0;
]]></code.init>
      <code.krate><![CDATA[int trig=inlet_rnd+param_rnd;
if(inlet_length>0){
length=___SMMUL(param_length<<3,inlet_length<<2);}
else length=param_length>>21;
int TRIG=0;
   if ((trig>0) && !ntrig) {
   	TRIG=1;
      for(i=0;i<64;i++){
         get[i] = (int32_t)(GenerateRandomNumber()% (100));
         if(get[i]<=param_chance){
         val[i] = (int32_t)(GenerateRandomNumber()% (param_max));}}
      ntrig=1;
   }
   else if (!(trig>0)) ntrig=0;
   count=inlet_count-(inlet_count/length)*length;
   outlet_v = val[count];
if(on>0){
	for(i=0;i<64;i++){
         val[i] = (int32_t)(GenerateRandomNumber()% (param_max));}
}

on=0;
outlet_rnd=TRIG;]]></code.krate>
   </obj.normal>
</objdefs>