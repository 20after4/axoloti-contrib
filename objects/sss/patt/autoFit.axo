<objdefs appVersion="1.0.12">
   <obj.normal id="autoFit" uuid="04e8ec1d-5369-4da7-8ce1-5c112a94bfb9">
      <sDescription>This module records the movement of the CV-knob at the rate set by the &quot;rate&quot; knob and spreads it over the counting range, making it &quot;fit&quot;.
At high rates, a short, fast &quot;wiggle&quot; with the CV-knob is enough to create a pattern that can last as long as the counter-input.
The &quot;count&quot; steps through this recording with 0 being the first step of the recording and &quot;max&quot; setting the last step of the recording. -&gt; Connect a control setting the maximum-count value or eg. use the PolyCount module and connect the &quot;count&quot; and &quot;max&quot; inlets/outlets of both modules, same can be done with the stage/stages outlets of the PolyCount.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>table.axh</helpPatch>
      <inlets>
         <int32 name="count"/>
         <int32 name="max"/>
      </inlets>
      <outlets>
         <bool32 name="clock"/>
         <frac32 name="out"/>
         <int32 name="count"/>
         <bool32 name="rec"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="CV"/>
         <frac32.s.map.lfopitch name="rate"/>
         <int32 name="step">
            <MinValue i="1"/>
            <MaxValue i="1024"/>
         </int32>
         <int32 name="wait">
            <MinValue i="1"/>
            <MaxValue i="2000"/>
         </int32>
         <frac32.s.map name="rnd"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
               <string>16384</string>
               <string>32768</string>
               <string>65536</string>
               <string>131072</string>
               <string>262144</string>
               <string>524288</string>
               <string>1048576</string>
               <string>2097152</string>
               <string>4194304</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
               <string>22</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
int32_t phase;
int ctrig;
int rtrig;
int ftrig;
int rec;
uint32_t cnt1;
uint32_t cnt2;
int32_t pv;
int32_t pc;
int32_t pt;
int32_t A[4];
int32_t TMP;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];]]></code.init>
      <code.krate><![CDATA[int32_t rate;
MTOFEXTENDED(param_rate,rate)
phase+=rate;
outlet_clock=phase>0?1:0;
if(!(pv==param_CV)){
		rec=1;
		cnt2=0;
	}
pv=param_CV;

if((rec>0)&&!ftrig){
	ftrig=1;
	cnt1=0;
}
else if(rec==0){ftrig=0;}

//if((phase>0)&&!ctrig){
//	ctrig=1;
//}
//else if(phase<=0){ctrig=0;}

int Do=((phase>0)&&rec);
if((Do)&&(!rtrig)){
	array[cnt1&LENGTHMASK]=param_CV>>12;
	cnt1+=1;
	cnt2+=1;
	cnt2=cnt2>2000?2000:cnt2;
	rec=cnt2>param_wait?0:rec;
	rtrig=1;
	
}
else if(Do==0){rtrig=0;}


outlet_count=cnt1;
if((!(pc==inlet_count))||(!(pt==inlet_max))){
int32_t RND=(int32_t)(GenerateRandomNumber());
int32_t tmp=cnt1-cnt2;
RND=___SMMUL((RND>>16)*(tmp)>>14,param_rnd<<3);
int32_t count=(tmp)*inlet_count/inlet_max*param_step+RND;
count=count-count/tmp*tmp;
count=count<0?count+tmp:count;
TMP=array[count&LENGTHMASK]<<12;
}
outlet_out=TMP;
outlet_rec=rtrig;
pc=inlet_count;
pt=inlet_max;]]></code.krate>
   </obj.normal>
</objdefs>