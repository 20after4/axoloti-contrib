<objdefs appVersion="1.0.11">
   <obj.normal id="rotationMix" uuid="101b72fe-82da-4329-a42f-d9b1dd6188a4">
      <sDescription>crossfade between four inputs using angle and distance controls.
distance is limited to a 1:1 ratio, so high distance values turn the sine-rotation into a clipped triangle rotation, following the maximum mix-limits.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="i1" description="input"/>
         <frac32buffer name="i2" description="input"/>
         <frac32buffer name="i3"/>
         <frac32buffer name="i4"/>
         <frac32.positive name="angle" description="control"/>
         <frac32 name="distance"/>
      </inlets>
      <outlets>
         <frac32buffer name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[int32_t prev1;
   int32_t step1;
   int32_t prev2;
   int32_t step2;]]></code.declaration>
      <code.krate><![CDATA[int32_t X;
int32_t Y;
int32_t phase=inlet_distance>0?(1<<26):0;
SINE2TINTERP((inlet_angle+phase)<<5,X)
SINE2TINTERP((inlet_angle+phase+(1<<25))<<5,Y)
X=X>>5;
X=X+(1<<26);
Y=Y>>5;
Y=Y+(1<<26);
int32_t distance=inlet_distance;
distance=distance>0?distance:-distance;
X=___SMMUL(distance<<3,X<<2);
Y=___SMMUL(distance<<3,Y<<2);


   step1 = (X - prev1)>>4;
   int32_t i1 = prev1;
   prev1 = X;
   step2 = (Y - prev2)>>4;
   int32_t i2 = prev2;
   prev2 = Y;]]></code.krate>
      <code.srate><![CDATA[i1 += step1;
i2 += step2;
int32_t cX = ((1<<27)-i1);
int32_t cY = ((1<<27)-i2);

int32_t a1 =  ___SMMUL(inlet_i2<<3,i1<<2);
        a1 += ___SMMUL(inlet_i1<<3, cX<<2);
int32_t a2 =  ___SMMUL(inlet_i4<<3,i1<<2);
        a2 += ___SMMUL(inlet_i3<<3,cX<<2);
int32_t a3 =  ___SMMUL(a1<<3,i2<<2);
        a3 += ___SMMUL(a2<<3,cY<<2);

      
      outlet_o= a3;]]></code.srate>
   </obj.normal>
</objdefs>