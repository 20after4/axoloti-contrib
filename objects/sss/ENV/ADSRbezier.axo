<objdefs appVersion="1.0.10">
   <obj.normal id="ADSRbezier" uuid="bc9e4ec4-18e1-4ad8-8941-0fa5618c3d42">
      <sDescription>positive constant value dial</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>ctrl.axh</helpPatch>
      <inlets>
         <bool32 name="gate"/>
         <frac32 name="A1"/>
         <frac32 name="A2"/>
         <frac32 name="A3"/>
         <frac32 name="D1"/>
         <frac32 name="D2"/>
         <frac32 name="D3"/>
         <frac32 name="R1"/>
         <frac32 name="R2"/>
         <frac32 name="R3"/>
      </inlets>
      <outlets>
         <frac32.positive name="out" description="output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.klineartime.exp name="ATim"/>
         <frac32.s.map.klineartime.exp name="DTim"/>
         <frac32.u.map name="SLvl"/>
         <frac32.s.map.klineartime.exp name="RTim"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t Agate;
int32_t Dgate;
int32_t Rgate;
int32_t val;
int32_t RAval;
int32_t RDval;
int32_t Aval;
int32_t Dval;
int32_t Rval;
int32_t DLvl;
int32_t RLvl;
int32_t RRval;
   int32_t t;

int32_t AOval;
int32_t DOval;
int32_t ROval;

]]></code.declaration>
      <code.init><![CDATA[int32_t Agate=0;
int32_t Dgate=0;
int32_t Rgate=0;]]></code.init>
      <code.krate><![CDATA[//ATTACK
Agate=inlet_gate;
if ((Agate>0) & (Aval<((1<<27)-1)))
   {
   MTOF(-param_ATim,t);
   Aval = Aval + (t>>7);
   }
else
{
	if   ((Agate>0) & (Aval>((1<<27)-1)))
	     {
	     Aval=(1<<27);
	     Dgate=(1<<27);
	     }
	else
	     {
		RAval=Aval;
		Aval=0;
		Dgate=0;
		}
}
//SUSTAIN
DLvl=(1<<27)-param_SLvl;

//DECAY
if ((Dgate>0) & (Dval<((1<<27)-1)))
   {
   MTOF(-param_DTim,t);
   Dval = Dval + (t>>7);
   }
else
{
	if   ((Dgate>0) & (Dval>((1<<27)-1)))
	     {
	     Dval=(1<<27);
	     }
	else
	     {
		RDval=Dval;
		Dval=0;
		}
}

RDval=___SMMUL(RDval<<3,DLvl<<2);

//RELEASE
if ((Agate==0) & (((RAval)-(RDval))>0))
{
	Rval=(1<<27);
	RRval=(RAval)-(RDval);
}
else
{
	if ((Agate==0) & (Rval>0))
	{
     MTOF(-param_RTim,t);
     Rval = Rval - (t>>7);
	}
	else
	{
	Rval=0;
	}
}

//BEZIER ATTACK
   {int(x1)=Aval;
   int(y1)=((128<<20)-Aval);
   int p0 = 0;
   int p1 = (int64_t)inlet_A1;
   int p2 = (int64_t)inlet_A2;
   int p3 = (int64_t)inlet_A3;
   int p4 = (int64_t)(1<<27);

int x2 = ___SMMUL(x1<<3,x1<<2);
int x3 = ___SMMUL(x2<<3,x1<<2);
int x4 = ___SMMUL(x3<<3,x1<<2);
int y2 = ___SMMUL(y1<<3,y1<<2);
int y3 = ___SMMUL(y2<<3,y1<<2);
int y4 = ___SMMUL(y3<<3,y1<<2);

int a = ___SMMUL(y4<<3,p0<<2);
int b = ___SMMUL(x1<<3,___SMMUL(y3<<3,p1<<2)<<2)*4;
int c = ___SMMUL(x2<<3,___SMMUL(y2<<3,p2<<2)<<2)*6;
int d = ___SMMUL(x3<<3,___SMMUL(y1<<3,p3<<2)<<2)*4;
int e =___SMMUL(x4<<3,p4<<2);
int f =  
      AOval= a+b+c+d+e;
   }
//BEZIER DECAY
   {int(x1)=Dval;
   int(y1)=((128<<20)-Dval);
   int p0 = 0;
   int p1 = (int64_t)inlet_D1;
   int p2 = (int64_t)inlet_D2;
   int p3 = (int64_t)inlet_D3;
   int p4 = (int64_t)(1<<27);

int x2 = ___SMMUL(x1<<3,x1<<2);
int x3 = ___SMMUL(x2<<3,x1<<2);
int x4 = ___SMMUL(x3<<3,x1<<2);
int y2 = ___SMMUL(y1<<3,y1<<2);
int y3 = ___SMMUL(y2<<3,y1<<2);
int y4 = ___SMMUL(y3<<3,y1<<2);

int a = ___SMMUL(y4<<3,p0<<2);
int b = ___SMMUL(x1<<3,___SMMUL(y3<<3,p1<<2)<<2)*4;
int c = ___SMMUL(x2<<3,___SMMUL(y2<<3,p2<<2)<<2)*6;
int d = ___SMMUL(x3<<3,___SMMUL(y1<<3,p3<<2)<<2)*4;
int e =___SMMUL(x4<<3,p4<<2);
int f =  
      DOval= a+b+c+d+e;
   }
//BEZIER RELEASE
   {int(x1)=Rval;
   int(y1)=((128<<20)-Rval);
   int p0 = 0;
   int p1 = (int64_t)inlet_R1;
   int p2 = (int64_t)inlet_R2;
   int p3 = (int64_t)inlet_R3;
   int p4 = (int64_t)(1<<27);

int x2 = ___SMMUL(x1<<3,x1<<2);
int x3 = ___SMMUL(x2<<3,x1<<2);
int x4 = ___SMMUL(x3<<3,x1<<2);
int y2 = ___SMMUL(y1<<3,y1<<2);
int y3 = ___SMMUL(y2<<3,y1<<2);
int y4 = ___SMMUL(y3<<3,y1<<2);

int a = ___SMMUL(y4<<3,p0<<2);
int b = ___SMMUL(x1<<3,___SMMUL(y3<<3,p1<<2)<<2)*4;
int c = ___SMMUL(x2<<3,___SMMUL(y2<<3,p2<<2)<<2)*6;
int d = ___SMMUL(x3<<3,___SMMUL(y1<<3,p3<<2)<<2)*4;
int e =___SMMUL(x4<<3,p4<<2);
int f =  
      ROval= a+b+c+d+e;
   }

//OUTCOME
outlet_out= AOval-___SMMUL(DOval<<3,DLvl<<2)+___SMMUL(ROval<<3,RRval<<2);]]></code.krate>
   </obj.normal>
</objdefs>