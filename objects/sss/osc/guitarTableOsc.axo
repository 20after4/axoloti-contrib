<objdefs appVersion="1.0.10">
   <obj.normal id="guitarTableOsc" uuid="e4dc8a12-5de1-4243-9af9-e583cd480ac7">
      <sDescription>this is the module to use with the guitarTable module in a polyphonic synthesizer.
The guitarTable module will create a complex waveform and this module is able to play that waveform. This was needed, otherwise, in a polyphonic setting, each module would create it&apos;s own table, filling up the available memory really quickly.

-features pulsewidth, start-shift (start) and pick-up (mod) modulation, all extern controllable. (though these are all only approximations to the changes made by the &quot;fixed settings&quot;, reshaping the wavetable)</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <frac32 name="pwm"/>
         <frac32 name="mod"/>
         <frac32 name="start"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="sine wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <frac32.u.map name="pwm"/>
         <frac32.u.map name="mod"/>
         <frac32.u.map name="start"/>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[uint32_t phase;
int i;


float32_t A;
float32_t B;
uint32_t PM;]]></code.declaration>
      <code.init><![CDATA[
	phase=0;
]]></code.init>
      <code.krate><![CDATA[

int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq)
PM=param_pwm+inlet_pwm;
PM=PM>0?PM:-PM;
PM=PM&((1<<28)-1);
PM=PM>(1<<27)?(2<<27)-PM:PM;
PM=__USAT(PM+1,27)<<4;
A=((float32_t)(1<<31))/((float32_t)(PM<<1));
B=((float32_t)(1<<31))/((float32_t)(((1<<31)-PM)<<1));
PM=PM<<1;
int32_t mod1=param_mod+inlet_mod;
mod1=mod1>0?mod1:-mod1;
mod1=mod1&((1<<28)-1);
mod1=mod1>(1<<27)?(2<<27)-mod1:mod1;
mod1=mod1<<4;
int32_t mod2;
mod2=mod1*3;

int32_t Start=param_start+inlet_start;
Start=Start>0?Start:-Start;
Start=Start&((1<<28)-1);
Start=Start>(1<<27)?(2<<27)-Start:Start;
]]></code.krate>
      <code.srate><![CDATA[

uint32_t Phase;
phase += freq;

uint32_t PHase=phase;
if(phase<(1<<31)){
PHase=___SMMUL(phase,Start<<4)<<2;
}
else{
PHase=(___SMMUL(phase,((1<<27)-Start)<<4)<<2);
}

if(PHase<PM){
Phase=(1<<31)+((int32_t)(PHase*A))+mod1;}
if(PHase>=PM){Phase=((uint32_t)((PHase-PM)*B-(1<<31)))+mod1+(1<<31);}

outlet_wave=attr_table.array[(Phase>>21)&2047];
]]></code.srate>
   </obj.normal>
</objdefs>