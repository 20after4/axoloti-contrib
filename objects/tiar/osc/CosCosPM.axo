<objdefs appVersion="1.0.12">
   <obj.normal id="CosCosPM" uuid="8dab060f-a6fa-42b3-9fe3-e19d20e087b8">
      <author>T. Rochebois</author>
      <license>LGPL</license>
      <helpPatch>CosCosPM.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <frac32.bipolar name="pForm"/>
         <frac32buffer.bipolar name="mod"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch"/>
         <frac32.s.map.pitch name="pForm"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t p = 0;
uint32_t dp;
uint32_t dpForm;
uint32_t hi, ha;]]></code.declaration>
      <code.krate><![CDATA[MTOFEXTENDED(inlet_pitch + param_pitch, dp);
MTOFEXTENDED(inlet_pForm + param_pForm, dpForm);
uint32_t h = (uint32_t)((1 << 22) * (dpForm / (float)dp));
/*
// exp(A) / exp(B) = exp(A-B)...
uint32_t h;
MTOFEXTENDED(inlet_pitch + param_pitch
           - inlet_pForm - param_pForm, h);
disp_test = h;
*/
//h = __USAT(param_h + inlet_h, 27);  // 0 32 q22

hi = h >> 22;  // [0 31]
ha = h & ((1 << 22) - 1); // [0,1[ q22

// todo: Anti alias by fade to 0 when dp * h > 0.25
//                      q32 
// disp_test = ___SMMUL(dp, h);]]></code.krate>
      <code.srate><![CDATA[p += dp;
uint32_t pm = p + (inlet_mod);
uint32_t p0 = pm * hi + (1024 << 20);  // 1024 <-> pi/2
//       p1 = p * (hi+1) + (1024 << 20);
uint32_t p1 = p0 + pm;

int32_t c0 = sine2t[p0 >> 20]>>1; // 20 = 32-12 (12 <-> 4096 table length)
int32_t c1 = sine2t[p1 >> 20]>>1;
//ha = 1<<22;
//                    q22   q30      q20
outlet_out = ___SMMLA(ha, c1 - c0, c0 >> 10) << 7;]]></code.srate>
   </obj.normal>
</objdefs>