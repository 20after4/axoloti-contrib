<objdefs appVersion="1.0.11">
   <obj.normal id="DP2SawPls" uuid="7fc94d66-a757-4c51-8916-8155ed0dd730">
      <sDescription>Low CPU Anti Aliased Sawtooth Pulse (Second order differentiated polynomial).</sDescription>
      <author>T. Rochebois</author>
      <license>LGPL</license>
      <helpPatch>DP2SawPls.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="selfPM wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="pitch" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[float p, dp, _dp2, y0, y1, y2;
float I2(float p){
  if(p<1.0f/3)
    return p * ((-7.0f/108) + p * ((5.0f/12) -0.5f * p ));
    else
    return (-1.0f/54) + p * (11.0f/108 - p * (1.0f/12));
}]]></code.declaration>
      <code.init><![CDATA[p = y0 = y1 = y2 = 0.0f;]]></code.init>
      <code.krate><![CDATA[int32_t idp;
MTOFEXTENDED(param_pitch + inlet_pitch, idp);
dp = idp*(1.0f/(1<<31));
_dp2 = (1 << 27) / (dp * dp);
// change of dp => update state variables y1 y2
p -= dp; p += (p < 0);
y2 = I2(p);
p += dp; p -= (p > 1);
y1 = I2(p);]]></code.krate>
      <code.srate><![CDATA[p += dp; p -= (p > 1);
y0 = I2(p);
outlet_wave = (int32_t) ((y0 + y2 - 2 * y1) * _dp2);
y2 = y1;
y1 = y0;]]></code.srate>
   </obj.normal>
</objdefs>