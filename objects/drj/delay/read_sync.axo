<objdefs appVersion="1.0.9">
  <obj.normal id="read_sync" uuid="9abca43569373145e559ad309eaf65a47b14cb54">
    <sDescription>Syncable delay read, non-interpolated, time modulation</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <frac32 name="time"  description="Delay time as fraction of max length, inactive in synced modes"/>
      <frac32 name="tmod"  description="Delay time modulation"/>
      <bool32.rising name="24ppq" description="Clock input"/>
      <int32         name="clkoverride" description="Override clocksource attribute, 0,1,2,3,4 = attr,int,ext,midi,midi-omni"/>
      <int32         name="divoverride" description="Override clockdiv parameter, values above 0 overrides clockdiv"/>
    </inlets>
    <outlets>
      <frac32buffer name="out" description="Delay output"/>
    </outlets>
    <displays/>
    <params>
      <int32 name="clockdiv" noLabel="false">
        <MinValue i="1"/>
        <MaxValue i="48"/>
      </int32>
      <frac32.u.map name="time" description="Internal delay time"/>
    </params>
    <attribs>
      <objref name="delayname"/>
      <combo name="clocksource">
        <MenuEntries>
          <string>Internal</string>
          <string>External</string>
          <string>MIDI</string>
        </MenuEntries>
        <CEntries>
          <string>0</string>
          <string>1</string>
          <string>2</string>
        </CEntries>
      </combo>
      <combo name="device">
        <MenuEntries>
          <string>omni</string>
          <string>din</string>
          <string>usb host port 1</string>
          <string>usb host port 2</string>
          <string>usb host port 3</string>
          <string>usb host port 4</string>
          <string>internal port 1</string>
          <string>internal port 2</string>
          <string>usb device port 1</string>
        </MenuEntries>
        <CEntries>
          <string>MIDI_DEVICE_OMNI, 0</string>
          <string>MIDI_DEVICE_DIN, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 2</string>
          <string>MIDI_DEVICE_USB_HOST, 3</string>
          <string>MIDI_DEVICE_USB_HOST, 4</string>
          <string>MIDI_DEVICE_INTERNAL, 1</string>
          <string>MIDI_DEVICE_INTERNAL, 2</string>
          <string>MIDI_DEVICE_USB_DEVICE, 1</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      #define USE_CLOCK_SMOOTHING

      enum
      {
        CLOCK_SOURCE_internal = 0,
        CLOCK_SOURCE_external = 1,
        CLOCK_SOURCE_midi     = 2,
        CLOCK_SOURCE_midi_omni= 3
      } CLOCK_SOURCE;

      uint32_t  ktimer;           // 3kHz timer
      uint32_t  old_24ppq;
      int32_t   clock_source;
      int32_t   clock_divider;
      float     delay_length_cpl; // cache result of  1.0 / lenght of delay line
      uint32_t  delay_sync_time;  // Synced time expressed in fractional delay length
      uint32_t  midi_period;      // Last measued sync period in samples
      uint32_t  midi_last_ktime;  // MIDI/24PPQ clock capture
      int32_t   midi_clock_count;
#ifdef USE_CLOCK_SMOOTHING
      float     midi_last_period;
#endif

      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }

      void on_sync_clock( void )
      {
        midi_clock_count++;
        if( midi_clock_count >= clock_divider )
          {
            // Find noof sample periods since last time;
            float period = (ktimer - midi_last_ktime) * 16;
#ifdef USE_CLOCK_SMOOTHING
            // Leaky integrator to minimize glitches on tempo changes
            period = period + 0.1f * (midi_last_period - period);
            midi_last_period = period;
#endif
            if( period < 1.0f )
              {
                period == 1.0f;
              }
            midi_period      = (uint32_t) period;
            midi_clock_count = 0;
            midi_last_ktime  = ktimer;
            float frac_time  = midi_period * delay_length_cpl;
            delay_sync_time  = (uint32_t) (frac_time * (1<<27));
          }
      }

    ]]></code.declaration>
    <code.init><![CDATA[

      ktimer           = 0;
      old_24ppq        = 0;
      clock_source     = CLOCK_SOURCE_internal;
      clock_divider    = 12;
      delay_length_cpl = 1.0f/attr_delayname.LENGTH;
      delay_sync_time  = 0;
      midi_last_ktime  = 0;
      midi_period      = 0;
      midi_clock_count = 0;
#ifdef USE_CLOCK_SMOOTHING
      midi_last_period = 0.0f;
#endif

    ]]></code.init>
    <code.krate><![CDATA[

      // Live overrides for the clock source and clock divider parameters.
      // Allow clock selection without restarting the patch is good :)
      // (The int32 spinbox is not CC assignable...(bug?))
      if( inlet_clkoverride > 0 )
        {
          clock_source = inlet_clkoverride - 1;
          if( clock_source > CLOCK_SOURCE_midi_omni )
            {
              clock_source = CLOCK_SOURCE_midi_omni;
            }
          else if( clock_source < CLOCK_SOURCE_internal )
            {
              clock_source = CLOCK_SOURCE_internal;
            }
        }
      else
        {
          clock_source = attr_clocksource;
        }

      if( inlet_divoverride > 0 )
        {
          clock_divider = inlet_divoverride;
          if( clock_divider < 1 )
            {
              clock_divider = 1;
            }
        }
      else
        {
          clock_divider = param_clockdiv;
        }

      // 24 PPQ sync input
      if( clock_source == CLOCK_SOURCE_external )
        {
          if( inlet_24ppq && !old_24ppq )
            {
              on_sync_clock();
            }
        }

      uint32_t length;
      if( clock_source != CLOCK_SOURCE_internal )
        {
          // tmod is scaled to cover the delay range
          int32_t  time_mod  = ___SMMUL( delay_sync_time<<3, inlet_tmod<<2 );
          length = __USAT(delay_sync_time + time_mod, 27) >> (27-attr_delayname.LENGTHPOW);
        }
      else
        {
          int32_t time_mod = ___SMMUL( (param_time + inlet_time)<<3, inlet_tmod<<2 );
          length = __USAT(param_time + inlet_time + time_mod, 27) >> (27-attr_delayname.LENGTHPOW);
        }

      if( length > attr_delayname.LENGTHMASK - BUFSIZE )
        {
          length = attr_delayname.LENGTHMASK - BUFSIZE;
        }

      uint32_t delay = attr_delayname.writepos - length - BUFSIZE;

      old_24ppq = inlet_24ppq;
      ktimer++;

    ]]></code.krate>
    <code.srate><![CDATA[

      outlet_out= attr_delayname.array[(delay++) & attr_delayname.LENGTHMASK]<<14;

    ]]></code.srate>
    <code.midihandler><![CDATA[

      if(    clock_source == CLOCK_SOURCE_midi_omni
         || (clock_source == CLOCK_SOURCE_midi && midi_device_test( dev, port, attr_device ) == 1)
        )
        {
          if( status == MIDI_TIMING_CLOCK )
            {
              on_sync_clock();
            }
        }

    ]]></code.midihandler>
  </obj.normal>
</objdefs>