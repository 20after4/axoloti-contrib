<objdefs appVersion="1.0.8">
  <obj.normal id="preset_manager" uuid="awca12227f535a1288055669829101d3ee7f0189">
    <sDescription>Preset save/load manager
    </sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <int32 name="preset" description="Preset number"/>
      <bool32.rising name="load" description="Trigger to load preset"/>
      <bool32.rising name="save" description="Trigger to save preset"/>
      <charptr32 name="prefix" description="File name prefix"/>
    </inlets>
    <outlets>
      <int32 name="preset" description="The current preset number"/>
      <bool32.pulse name="load" description="Pulse signals loading"/>
      <bool32.pulse name="save" description="Pulse signals saving"/>
    </outlets>
    <displays>
      <int32.label name="current  "/>
    </displays>
    <params>
      <bool32.mom name="load" description="Click to load preset"/>
      <int32 name="preset" description="Preset number to save or load">
        <MinValue i="0"/>
        <MaxValue i="999"/>
      </int32>
      <bool32.mom name="save" description="Click to save preset"/>
    </params>
    <attribs>
      <combo name="pgmchange">
         <MenuEntries>
            <string>Disabled</string>
            <string>Enabled</string>
         </MenuEntries>
         <CEntries>
            <string>0</string>
            <string>1</string>
         </CEntries>
      </combo>
      <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
      <spinner name="presetcc" MinValue="-1" MaxValue="127" DefaultValue="125"/>
      <spinner name="loadcc" MinValue="-1" MaxValue="127" DefaultValue="126"/>
      <spinner name="savecc" MinValue="-1" MaxValue="127" DefaultValue="127"/>
      <spinner name="autoload" MinValue="-1" MaxValue="999" DefaultValue="-1"/>
    </attribs>
    <depends>
      <depend>fatfs</depend>
    </depends>
    <code.declaration><![CDATA[

      /*  The preset manager saves and loads all parameters in the
       *  patch level it appears in. Each sub patch may need their
       *  own preset manager to handle its parameters, in the case
       *  of hierarchical patches and depending on what you want saved.
       *
       *  There are 4 ways to load and save presets:
       *    1 - Using MIDI by sending standard program change messages.
       *    2 - Using MIDI by sending designated CCs set the preset number
       *        and trigger load and save operations.
       *    3 - Using the preset number spinbox and load and save buttons
       *        on the module for managing presets from the patch windows.
       *    3 - Using the preset, load and save inputs to set
       *        the preset number and trigger load and save operations.
       *
       *  The pgmchange menu enables or disables MIDI program changes.
       *
       *  The channel spinbox sets the MIDI channel that will
       *  be used for MIDI control.
       *
       *  The presetcc, loadcc and savecc spinboxes selects the MIDI CC
       *  numbers used for controlling the preset manager. The preset number
       *  to load or save is set with presetcc, the load action is triggered
       *  by loadcc and the save action is triggered by savecc. Set the CC
       *  numbers to -1 to disable their corresponding functions.
       *
       *  The autoload spinbox selects a preset number which will be loaded
       *  automatically when the patch starts. Set autoload to -1 for no preset
       *  to be loaded.
       *
       *  The preset spinbox, and load and save buttons control the
       *  load and save operations directly from a patch window.
       *
       *  The preset output and the save and load pulse outputs can
       *  be used to chain save/load actions to sub patches by connecting
       *  to the corresponding inputs of other preset managers.
       *  If managing presets by MIDI only, the preset managers
       *  (in the various sub patches) that listens to MIDI does
       *  not need to be chained together. When a preset manager gets
       *  a change message via MIDI, it will not send save/load pulses
       *  to avoid multiple load/save triggers.
       *
       *  The filenames are constructed of a prefix, taken form the prefix
       *  string input, a three digit zero padded preset number and a file
       *  extension. The preset files are saved in the SD card directory of
       *  the current patch. So a preset filename looks like e.g.:
       *  0:/my_patch/foo001.pst
       *
       *  This means there are 1000 preset slots, although only the first 128
       *  can be accessed via MID (for now).
       *
       *  If a patch has multiple preset managers throughout its sub patches,
       *  each preset manager needs a unique string for the prefix. This allows
       *  each sub patch to save its parameters to separate files that can be
       *  reloaded later by the same sub patch in a different context.
       *  As an example, saving preset number 123 for "my_patch",
       *  containing two preset managers with the prefixes "syn" and "echo",
       *  results in the following files being created:
       *  0:/my_patch/syn123.pst
       *  0:/my_patch/echo123.pst
       *
       *  The file format is an array of 32 bit words, with a two word header:
       *  word 0 => "PRS1", file type identifier string
       *  word 1 => number of parameters
       *  word 2 => first parameter value
       *  ..
       *  word N => last parameter value
       *
       */

      #define DEBUGF LogTextMessage
      //#define DEBUGF(...) {}

      int32_t     start_sequence;
      int32_t     preset_no;
      int32_t     midi_preset_no;
      int32_t     old_inlet_save;
      int32_t     old_param_save;
      int32_t     old_inlet_load;
      int32_t     old_param_load;
      int32_t     load_pulse;
      int32_t     save_pulse;
      const char  *magic_v1;
      const char  *suffix;
      const char  *prefix_copy;

      /*
       *  Constructs a filename to use
       */
      void prepare_filename( char *filename, int buflen, const char *prefix, int preset_no )
        {
          int offset = 0;
          if( prefix != NULL )
            {
              strncpy( filename, prefix, buflen );
              offset = strlen( filename );
            }
          if( buflen >= offset + 4 )
            {
              filename[offset++] = '0' + (preset_no / 100) % 10;
              filename[offset++] = '0' + (preset_no / 10) % 10;
              filename[offset++] = '0' + preset_no % 10;
              filename[offset]   = 0;
            }
          strncpy( filename + offset, suffix, buflen - offset );
          filename[buflen-1]   = 0;
        };

      /*
       *  Handle file errors by reporting an clsing the file
       */
      int file_error( FIL *f, FRESULT err, const char *filename )
        {
          if( err != FR_OK )
            report_fatfs_error( err, filename );
          if( f != NULL )
            f_close( f );
          return err;
        }

      /*
       *  Saves a preset from the SD card
       */
      int preset_save( const char *prefix, int preset_no )
        {
          char          filename[64];
          FIL           FileObject;
          FRESULT       err;
          unsigned int  bytes_written;
          unsigned int  bytes_read;
          int32_t       value;

          prepare_filename( filename, 64, prefix, preset_no );
          err = f_open( &FileObject, filename, FA_WRITE | FA_CREATE_ALWAYS );
          if( err != FR_OK )
            return file_error( NULL, err, filename );

          DEBUGF("preset_manager::preset_save(): file open OK, name = '%s'", filename );

          // Write header word 1: type and version identifier
          err = f_write( &FileObject, (uint8_t *) magic_v1, 4, &bytes_written );
          if( err != FR_OK )
            return file_error( &FileObject, err, filename );

          // Write header word 2: number of parameters
          value = parent->NPEXCH;
          err = f_write( &FileObject, (uint8_t *) &value, sizeof(int32_t), &bytes_written );
          if( err != FR_OK )
            return file_error( &FileObject, err, filename );

          DEBUGF("preset_manager::preset_save(): header written OK" );

          // Read the parameters from the patch and write them to the file
          for( int i = 0; i < parent->NPEXCH; i++ )
            {
              value = parent->PExch[i].value;
              DEBUGF("preset_manager::preset_save(): 0x%08x", value );
              err = f_write( &FileObject, (uint8_t *) &value, sizeof(int32_t), &bytes_written );
              if( err != FR_OK )
                return file_error( &FileObject, err, filename );
           }

          DEBUGF("preset_manager::preset_save(): params written OK" );

          err = f_close(&FileObject);
          if( err != FR_OK )
            return file_error( NULL, err, filename );

          return FR_OK;
        };

      /*
       *  Loads a preset from the SD card
       */
      int preset_load( const char *prefix,  int preset_no )
        {
          char          filename[64];
          FIL           FileObject;
          FRESULT       err;
          unsigned int  bytes_read;
          int32_t       n_params;
          int32_t       value;

          prepare_filename( filename, 64, prefix, preset_no );
          err = f_open(&FileObject, filename, FA_READ | FA_OPEN_EXISTING );
          if( err != FR_OK )
            return file_error( NULL, err, filename );

          DEBUGF("preset_manager::preset_load(): file opened OK, name = '%s'", filename );

          // Read header word 1: identifier, magic word and version in one fell swoop
          char magic_buf[4];
          err = f_read( &FileObject, (uint8_t *) magic_buf, 4, &bytes_read );
          if( err != FR_OK )
            return file_error( NULL, err, filename );

          for( int i = 0; i < 4; i++ )
            {
              if( magic_buf[i] != magic_v1[i] )
                {
                  DEBUGF("preset_manager:: preset_load(): header mismatch" );
                  f_close(&FileObject);
                  return FR_DENIED;
                }
            }
          DEBUGF("preset_manager::preset_load(): header OK" );


          // Read header word 2: number of parameters
          n_params = 0;
          err = f_read( &FileObject, (uint8_t *) &n_params, sizeof(int32_t), &bytes_read );
          if( err != FR_OK )
            return file_error( NULL, err, filename );

          DEBUGF("preset_manager::preset_load(): header n params = %d, & NPEXCH = %d", n_params, parent->NPEXCH );

          if( n_params != parent->NPEXCH )
            {
              DEBUGF("preset_manager::preset_load(): n params mismatch" );
              f_close(&FileObject);
              return FR_DENIED;
            }

          DEBUGF("preset_manager::preset_load(): n params match OK" );

          /*
           *  Read the parameters from the file and write them to the patch
           *  PExParameterChange() signaling mask:
           *    0x00000001 -> USB parameter exchange
           *    0x00000002 -> DIN MIDI port
           *    0x00000004 -> Display
           *    0x00000008 -> buttons and dials
           *    0x00000010 -> polling readback enabled (never clear this) (OBSOLETE)
           */
          for( int i = 0; i < n_params; i++ )
            {
              err = f_read( &FileObject, (uint8_t *) &value, sizeof(int32_t), &bytes_read );
              if( err != FR_OK )
                return file_error( &FileObject, err, filename );
              DEBUGF("preset_manager: preset_load: 0x%08x", value );
              PExParameterChange( &parent->PExch[i], value, 0xFFFD );
           }

          DEBUGF("preset_manager::preset_load(): params read OK" );

          err = f_close(&FileObject);
          if( err != FR_OK )
            return file_error( NULL, err, filename );

          return FR_OK;
        };

    ]]></code.declaration>
    <code.init><![CDATA[

      start_sequence  = 0;
      preset_no       = 0;
      midi_preset_no  = 0;
      old_inlet_save  = 0;
      old_param_save  = 0;
      old_inlet_load  = 0;
      old_param_load  = 0;
      load_pulse      = 0;
      save_pulse      = 0;
      magic_v1        = "PRS1";  // The file header magic word, version 1
      suffix          = ".prs";  // The file extension
      prefix_copy     = "";      // Need the inlet_prefix pointer in the MIDI handler

    ]]></code.init>
    <code.krate><![CDATA[


      if( start_sequence < 2 )
        {
          /*
           *  We need to wait one k-rate iteration for signal driven startup actions.
           *  At start_sequence == 0 we do nothing, but wait for signals to propagate in the patch.
           *  At start_sequence == 1 we can reliably read inputs, parameters and attributes,
           *  and we perform the optional autoloading of a preset.
           */
          DEBUGF("preset_manager::krate(): start_sequence = %d", start_sequence );
          if( start_sequence == 0 )
            {
              extern struct KeyValuePair *ObjectKvpRoot;
              extern struct KeyValuePair *ObjectKvps[];


              LogTextMessage( "preset_manager::krate(): ObjectKvpRoot = %08x, ObjectKvps = %08x, n = %d", ObjectKvpRoot, ObjectKvps, ObjectKvpRoot->apvp.length );

              for( int i = 0; i < ObjectKvpRoot->apvp.length; i++ )
                {
                  switch( ObjectKvps[i]->kvptype )
                    {
                      case KVP_TYPE_IPVP :
                        LogTextMessage( "KVP_TYPE_IPVP: .keyName = '%s', .value = %08x",
                          ObjectKvps[i]->keyname != NULL ? ObjectKvps[i]->keyname : "NULL",
                          ObjectKvps[i]->ipvp.PEx->value );
                        break;
                      case KVP_TYPE_IVP :
                        LogTextMessage( "KVP_TYPE_IPVP: .keyName = '%s', .value = %08x",
                          ObjectKvps[i]->keyname != NULL ? ObjectKvps[i]->keyname : "NULL",
                          ObjectKvps[i]->ivp.value );
                        break;
                      default :
                        LogTextMessage( "KVP_TYPE_ = %d", ObjectKvps[i]->kvptype );
                        break;
                    }
                }
            }
          else if( start_sequence == 1 )
            {
              prefix_copy    = inlet_prefix;
              preset_no      = param_preset;
              midi_preset_no = preset_no;

              if( attr_autoload >= 0 )
                {
                  DEBUGF("preset_manager::krate(): preset autoload" );
                  if( preset_load( inlet_prefix, attr_autoload ) == FR_OK )
                    {
                      load_pulse = 1;
                      preset_no  = attr_autoload;
                    }
                }
            }
          start_sequence++;
        }
      else if(   (old_inlet_load != inlet_load && inlet_load != 0)
              || (old_param_load != param_load && param_load == 0)
             )
        {
          /*
           *  Load triggered
           */
          DEBUGF("preset_manager::krate(): load_triggered");
          int32_t preset_candidate;
          if( old_param_load != param_load && param_load == 0 )
             {
               preset_candidate = param_preset;
             }
           else
             {
               preset_candidate = inlet_preset;
             }

          if( preset_load( inlet_prefix, preset_candidate ) == FR_OK )
            {
              load_pulse = 1;
              preset_no  = preset_candidate;
            }
        }
      else if(   (old_inlet_save != inlet_save && inlet_save != 0)
              || (old_param_save != param_save && param_save == 0)
             )
        {
          /*
           *  Save triggered
           */
          DEBUGF("preset_manager::krate(): save_triggered" );
          int32_t preset_candidate;
          if( old_param_save != param_save && param_save == 0 )
            {
              preset_candidate = param_preset;
            }
          else
            {
              preset_candidate = inlet_preset;
            }

          if( preset_save( inlet_prefix, preset_candidate ) == FR_OK )
            {
              save_pulse = 1;
              preset_no  = preset_candidate;
            }
        }

      disp_current    = preset_no;
      outlet_preset   = preset_no;
      outlet_load     = load_pulse;
      outlet_save     = save_pulse;
      old_inlet_load  = inlet_load;
      old_param_load  = param_load;
      old_inlet_save  = inlet_save;
      old_param_save  = param_save;
      load_pulse      = 0;
      save_pulse      = 0;

    ]]></code.krate>
    <code.midihandler><![CDATA[

      /*
       *  The MIDI code is untested!
       *  Include listening for program/bank change messages, CC 0 (MSB) and 32 (LSB)?
       */
      if( status == attr_channel + MIDI_PROGRAM_CHANGE )
        {
          if( attr_pgmchange == 1 && preset_load( prefix_copy, data1 ) == FR_OK )
            {
              preset_no = data1;
            }
        }
      else if( status == attr_channel + MIDI_CONTROL_CHANGE )
        {
          if( data1 == attr_presetcc )
            {
              midi_preset_no = data2;
            }
          else if( data1 == attr_loadcc && preset_load( prefix_copy, midi_preset_no ) == FR_OK )
            {
              preset_no = midi_preset_no;
            }
          else if( data1 == attr_savecc && preset_save( prefix_copy, midi_preset_no ) == FR_OK )
            {
              preset_no = midi_preset_no;
            }
        }

    ]]></code.midihandler>
  </obj.normal>
</objdefs>