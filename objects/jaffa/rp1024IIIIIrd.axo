<objdefs appVersion="1.0.12">
   <obj.normal id="rp1024IIIIIrd" uuid="0d1faade-e760-4c7f-a1c7-54533df060e0">
      <sDescription>Random player with string index. Use to make the others where you REMOVE the string index and call directly from SD-card.

w. offset &amp; length control.

Also has build in REAL random unipolar.

r= rounded version.</sDescription>
      <author>Jaffasplaffa</author>
      <license>BSD</license>
      <inlets>
         <int32.positive name="ppq" description="ppq"/>
         <int32 name="rp" description="ranpattern"/>
         <int32 name="off" description="offset"/>
      </inlets>
      <outlets>
         <frac32 name="unip" description="pattern out"/>
         <frac32 name="bip"/>
      </outlets>
      <displays/>
      <params>
         <bool32.tgl name="on"/>
         <bool32.tgl name="RPATorRAN" description="Random pattern or real random"/>
         <bool32.tgl name="randtopat" description="Real random stay with int the pattern only works when rpat"/>
         <int32 name="div">
            <MinValue i="1"/>
            <MaxValue i="256"/>
         </int32>
         <int32 name="pattrn" description="Selects pattern from SD-card location 0:/Tab/Rnd/1024/000.tab">
            <MinValue i="1"/>
            <MaxValue i="100"/>
         </int32>
         <int32 name="length" description="Sets length of the pattern.">
            <MinValue i="1"/>
            <MaxValue i="1024"/>
         </int32>
         <int32 name="offset" description="Offsets the pattern.">
            <MinValue i="0"/>
            <MaxValue i="1024"/>
         </int32>
      </params>
      <attribs/>
      <includes>
         <include>chibios/ext/fatfs/src/ff.h</include>
      </includes>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[static const uint32_t LENGTHPOW = 10; 	// LOOK in the size attribute setting 1024 = 10	//
static const uint32_t LENGTH = 1024;	// set the length 1024 for a 1024 pattern....	//	
// static const uint32_t LENGTHMASK = ((1<<attr_size)-1); NOT NEEDED
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;



int32_t RANPAT;

int ntrig;

char c[64];
int offset;
int pval;


// Logic/change //
   int ptrig;
   int32_t pvalLC;
   int32_t LOGICCHANGE;



      int ptrig2;
   int32_t pval2;
   int32_t LCFORREALRANDOM;
   int32_t valR;
   int ntrigR;
   int32_t REALRANDOM;

   int32_t RANDTOPAT;

   int32_t ROUNDREALRANDOM;

   int32_t BIREAL;
   int32_t BIRANPAT;]]></code.declaration>
      <code.init><![CDATA[static int8_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTH;i++) array[i]=0;
}




ntrig = 0;

strcpy(&c[0],"0:/Tab/Rnd/1024/000.tab");
offset = strlen("0:/Tab/Rnd/1024/");
pval = 0;


ptrig = 0;
pvalLC = 0;



ptrig2 = 0;
pval2 = 0;



valR = (int32_t)(GenerateRandomNumber())>>4;
ntrigR = 0;]]></code.init>
      <code.krate><![CDATA[// String index //
if (inlet_rp+param_pattrn != pval){   pval = inlet_rp+param_pattrn;
   int i = inlet_rp+param_pattrn;   int i0 = i/10;
   c[offset+2] = '0'+i-10*i0;
   i = i0; i0 = i/10;
   c[offset+1] = '0'+i-10*i0;
   i = i0; i0 = i/10;
   c[offset+0] = '0'+i-10*i0;
}
// outlet_out = &c[0];

// Logic/chnage //
if ((pvalLC != inlet_rp+param_pattrn)&(!ptrig)) { 
  LOGICCHANGE = 1;
  pvalLC = inlet_rp+param_pattrn;
  ptrig = 1;
} else {
  ptrig = 0;
  LOGICCHANGE = 0;
}

// Table/load //
if ((LOGICCHANGE>0) && !ntrig) {
    char* filename = &c[0]; // filename internally //
    ntrig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    codec_clearbuffer();
    err = f_open(&FileObject, filename, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,filename); return;}
    int rem_sz = sizeof(*array)*LENGTH;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }    if (err != FR_OK) { report_fatfs_error(err,filename); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,filename); return;};
  }
  else if (!(LOGICCHANGE>0)) ntrig=0;

int32_t clockdiv = inlet_ppq/param_div;

// Length divremc //
int32_t DIVNEW = RANDTOPAT/param_length;
int32_t LENGTH = RANDTOPAT-DIVNEW*param_length;


     // Table/read (green in - blue out) //

     // outlet_out= array[__USAT(LENGTH+param_offset,LENGTHPOW)]<<GAIN;}
     RANPAT = array[__USAT(LENGTH+param_offset,LENGTHPOW)]<<GAIN;



 if ((pval2 != clockdiv)&(!ptrig2)) { 
  LCFORREALRANDOM = 1;
  pval2 = clockdiv;
  ptrig2 = 1;
} else {
  ptrig2 = 0;
  LCFORREALRANDOM = 0;
}


   if ((LCFORREALRANDOM>0) && !ntrigR) { valR = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
   else if (!(LCFORREALRANDOM>0)) ntrigR=0;
   // REALRANDOM= valR;
   REALRANDOM= (valR>>1)+(1<<26); // Unipolar //

   ROUNDREALRANDOM = (REALRANDOM + 0x100000)&0xFFE00000;

   // Set if RPAT MODE stays within the pattern, WHEN OF IT IS JUST RANDOM //
   RANDTOPAT = (param_randtopat)?REALRANDOM:clockdiv;


BIREAL	= (ROUNDREALRANDOM-(1<<26))<<1;
BIRANPAT	= (RANPAT-(1<<26))<<1;	


   if(param_on){
   outlet_unip= (param_RPATorRAN)?ROUNDREALRANDOM:RANPAT;
   outlet_bip= (param_RPATorRAN)?BIREAL:BIRANPAT;}
   else{
   outlet_unip = 0;
   outlet_bip = 0;
   }]]></code.krate>
   </obj.normal>
</objdefs>